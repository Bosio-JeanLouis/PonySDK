apply plugin: 'java'

sourceCompatibility = 1.6

project.ext.srcCore = 'src-core/main/java';
project.ext.srcDefaultimpl = 'src-defaultimpl/main/java';
project.ext.srcGenerator = 'src-generator/main/java';
project.ext.srcGenerated = 'src-generated/main/java';
project.ext.srcJetty = 'src-jetty/main/java';
project.ext.srcSpring = 'src-spring/main/java';
project.ext.srcPersistency = 'src-persistency/main/java';
project.ext.srcHibernate = 'src-hibernate/main/java';
project.ext.srcMongoDB = 'src-mongodb/main/java';
project.ext.srcJasper = 'src-jasper/main/java';
project.ext.gwtOutputDirName = buildDir.name + '/gwt';
project.ext.warResources = 'src-core/main/resources/war';
project.ext.confResources = 'src-core/main/resources/conf';
project.ext.javadocResources = 'src-core/main/javadoc';

sourceSets {
	main {
		java {
			srcDir srcCore
			srcDir srcDefaultimpl
			srcDir srcGenerator
			srcDir srcGenerated
			srcDir srcJetty
			srcDir srcSpring
			srcDir srcPersistency
			srcDir srcHibernate
			srcDir srcMongoDB
		}
	}
}

repositories {
	mavenCentral()
}

configurations {
	xjc
	gwt
	spring
	sl4j
	log4j
	commons
	hibernate
	jasper
	mongodb
	selenium
	json_jackson
    jetty
	
	compile {
		extendsFrom gwt, spring, sl4j, hibernate, jasper, mongodb, json_jackson, jetty, log4j
	}

	testCompile {
		extendsFrom selenium
	}
	
	runtime {
		extendsFrom spring, sl4j, hibernate, mongodb, json_jackson
	}
    
}

dependencies {
	xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4'
	gwt 'com.google.gwt:gwt-user:2.5.0-rc1'
	gwt 'com.google.gwt:gwt-dev:2.5.0-rc1'
	gwt 'com.google.gwt:gwt-codeserver:2.5.0-rc1'
	gwt 'javax.validation:validation-api:1.0.0.GA@jar'
	gwt 'org.json:json:20090211'
	spring 'org.springframework:spring-context:3.0.6.RELEASE'
	spring 'org.springframework:spring-web:3.0.6.RELEASE'
	sl4j 'org.slf4j:slf4j-api:1.6.2'
	sl4j 'org.slf4j:log4j-over-slf4j:1.6.4'
	sl4j 'ch.qos.logback:logback-classic:1.0.0'
	sl4j 'org.slf4j:jcl-over-slf4j:1.6.4'
	log4j 'log4j:log4j:1.2.16'
	log4j 'commons-io:commons-io:20030203.000550'
	commons 'commons-beanutils:commons-beanutils:1.8.3'
	hibernate 'org.hibernate:hibernate-core:3.6.7.Final'
	jasper 'ar.com.fdvs:DynamicJasper:3.0.13'
	mongodb 'org.mongodb:mongo-java-driver:2.7.3'
	selenium 'org.seleniumhq.selenium:selenium-java:2.25.0'
	selenium 'junit:junit:4.10'
	json_jackson 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    jetty 'org.eclipse.jetty:jetty-server:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-servlet:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-webapp:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-servlets:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-websocket:8.1.4.v20120524'
    jetty 'org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0'
}
manifest {
	attributes("Manifest-Version": "1.0", "License-Title": "Apache License 2.0", "Implementation-Title": "PonySDK", "Package-Version": "1",	"Implementation-Version": "1.0", "Implementation-Vendor": "PonySDK")
}

jar {
	baseName = 'ponysdk'
    from sourceSets.main.output
    from gwtOutputDirName
    from warResources
    
    metaInf {
        from 'src-core/main/resources/META-INF'
    }
    
    into('conf') {
        from confResources
    }
}

task cleanGenerated(type: Delete) {
	delete srcGenerated
}

task generateDatamodel {
	description = 'Model generation'
	inputs.file file('src-core/main/resources/spec/project_schema.xsd')
	outputs.dir file(srcGenerated)
	doLast {
		file(srcGenerated).mkdirs();
		ant {
			taskdef(name: 'xjc',
			classname: 'com.sun.tools.xjc.XJCTask',
			classpath: configurations.xjc.asPath)
			xjc(destdir:srcGenerated, package:'com.ponysdk.generator') {
				schema(dir:'src-core/main/resources/spec', includes: 'project_schema.xsd')
			}
		}
	}
}

task compileDatamodel(type: Compile) {
	classpath = configurations.xjc
	source = file(srcGenerated)
	destinationDir = file("$buildDir/classes/main")
}

task compileGenerator(type: Compile) {
	classpath = files("$buildDir/classes/main") + configurations.gwt + configurations.sl4j
	source = srcGenerator
	destinationDir = file("$buildDir/classes/main")
}

task generateDictionnary(type: JavaExec) {
	description = 'Dictionnary generation'
	main = 'com.ponysdk.generator.PropertiesDictionnaryGenerator'
	classpath { 
		[
			file("$buildDir/classes/main"),
			configurations.sl4j,
			configurations.gwt
		]
	}
	args = [
		'verbose=false'
	]
}

task gwtc(type: JavaExec) {
	description = 'GWT compile'
	main = 'com.google.gwt.dev.Compiler'
	maxHeapSize = '512M'
	workingDir = buildDir
	project.ext.workers = Runtime.getRuntime().availableProcessors()
	inputs.dir file('src-core/main/java/com/ponysdk/ui/terminal')
	outputs.dir file(gwtOutputDirName)
	classpath {
		[
			sourceSets.main.java.srcDirs,
			sourceSets.main.output,
			configurations.gwt
		]
	}
	args = [
		'-war',
		'gwt',
		'-localWorkers',
		workers,
		'com.ponysdk.ui.PonyTerminal'
	]
}

task generate {
	inputs.file files('src-core/main/resources/spec')
	outputs.dir file(srcGenerated)
}


/**javadoc{
    title = 'PonySDK javadoc'
    excludes = ['com.ponysdk.ui.terminal']
    doLast {
        copy {
            from javadocResources
            into buildDir.name + '/docs/javadoc';
        }
    }
}**/


// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    baseName = 'ponysdk-src'
	from sourceSets.main.allJava
	from(srcCore) {
		include '**/*.xml'
	}
	from(srcGenerated) {
		include '**/*.xml'
	}
}
 
task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
     /**
     title = 'PonySDK javadoc'
    excludes = ['com.ponysdk.ui.terminal']
    doLast {
        copy {
            from javadocResources
            into buildDir.name + '/docs/javadoc';
        }
    }
     **/
}
 
// add javadoc/source jar tasks as artifacts
artifacts {
     archives sourcesJar
     archives javadocJar
}



task copyAllLibs << {
	println 'Copying all libs'
	copy {
		from configurations.gwt
		into 'libs/gwt'
	}
	copy {
		from configurations.spring
		into 'libs/spring'
	}
	copy {
		from configurations.sl4j
		into 'libs/logging'
	}
	copy {
	    from configurations.log4j
	    into 'libs/logging'
	}
	copy {
		from configurations.hibernate
		into 'libs/hibernate'
	}
	copy {
		from configurations.jasper
		into 'libs/jasper'
	}
	copy {
		from configurations.mongodb
		into 'libs/mongodb'
	}
	copy {
		from configurations.selenium
		into 'libs/tests'
	}
	copy {
		from configurations.json_jackson
		into 'libs/json_jackson'
	}
	copy {
	    from configurations.jetty
	    into 'libs/jetty'
	}
	copy {
	    from configurations.commons
	    into 'libs/commons'
	}
}

generate.dependsOn(generateDictionnary)
generateDictionnary.dependsOn(compileGenerator)
compileGenerator.dependsOn(compileDatamodel)
compileDatamodel.dependsOn(generateDatamodel)

clean.dependsOn(cleanGenerated)
compileJava.dependsOn(generate)
jar.dependsOn(gwtc)
assemble.dependsOn(copyAllLibs)
