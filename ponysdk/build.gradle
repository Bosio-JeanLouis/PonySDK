apply plugin: 'java'

sourceCompatibility = 1.6

srcCore = 'src-core/main/java';
srcDefaultimpl = 'src-defaultimpl/main/java';
srcGenerator = 'src-generator/main/java';
srcGenerated = 'src-generated/main/java';
srcJetty = 'src-jetty/main/java';
srcSpring = 'src-spring/main/java';
srcHibernate = 'src-hibernate/main/java';
srcJasper = 'src-jasper/main/java';

gwtOutputDirName = buildDir.name + '/gwt';
warResources = 'src-core/main/resources/war';
confResources = 'src-core/main/resources/conf';

sourceSets {
	main {
		java {
			srcDir srcCore
			srcDir srcDefaultimpl
			srcDir srcGenerator
			srcDir srcGenerated
			srcDir srcJetty
			srcDir srcSpring
			srcDir srcHibernate
		}
	}
}

repositories {
	mavenCentral()
}

configurations {
	xjc
	gwt
	spring
	sl4j
	hibernate
	jasper
	
	compile {
		extendsFrom gwt, spring, sl4j, hibernate, jasper
	}
	
	runtime {
		extendsFrom spring, sl4j, hibernate
	}
}

dependencies {
	xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4'
	gwt 'com.google.gwt:gwt-user:2.4.0'
	gwt 'com.google.gwt:gwt-dev:2.4.0'
	gwt 'javax.validation:validation-api:1.0.0.GA@jar'
	spring 'org.springframework:spring-context:3.0.6.RELEASE'
	spring 'org.springframework:spring-web:3.0.6.RELEASE'
	sl4j 'org.slf4j:slf4j-api:1.6.2'
	sl4j 'ch.qos.logback:logback-classic:1.0.0'
	hibernate 'org.hibernate:hibernate-core:3.6.7.Final'
	jasper 'ar.com.fdvs:DynamicJasper:3.0.13'
}

manifest {
	attributes("Manifest-Version": "1.0", "License-Title": "Apache License 2.0", "Implementation-Title": "PonySDK", "Package-Version": "1",	"Implementation-Version": "1.0", "Implementation-Vendor": "PonySDK")
}

jar {
	baseName = 'ponysdk'
	doLast {
		tasks.jarSource.execute()
	}
    
    from sourceSets.main.output
    from gwtOutputDirName
    from warResources
    
    metaInf {
        from 'src-core/main/resources/META-INF'
    }
    
    into('conf') {
        from confResources
    }
}

task cleanGenerate << {
	new File(srcGenerated).deleteDir();
}

task generate {
	description = 'Model generation'
	srcFile = file('src-core/main/resources/spec/project_schema.xsd')
	destDir = file(srcGenerated)
	inputs.file srcFile
	outputs.dir destDir
	doLast {
		file(srcGenerated).mkdirs();
		ant {
			taskdef(name: 'xjc',
			classname: 'com.sun.tools.xjc.XJCTask',
			classpath: configurations.xjc.asPath)
			xjc(destdir:srcGenerated, package:'com.ponysdk.generator') {
				schema(dir:'src-core/main/resources/spec', includes: 'project_schema.xsd')
			}
		}
	}
}

task gwtc(type: JavaExec) {
	description = 'GWT compile'
	main = 'com.google.gwt.dev.Compiler'
	maxHeapSize = '512M'
	workingDir = buildDir
	workers = Runtime.getRuntime().availableProcessors()
	outputs.upToDateSpec = new org.gradle.api.specs.AndSpec() // GRADLE-1483
	inputs.dir file('src-core/main/java/com/ponysdk/ui/terminal')
	outputs.dir file(gwtOutputDirName)
	classpath {
		[
			sourceSets.main.java.srcDirs,
			sourceSets.main.output,
			configurations.gwt
		]
	}
	args = [
		'-war',
		'gwt',
		'-localWorkers',
		workers,
		'com.ponysdk.ui.PonyTerminal'
	]
}

task jarSource(type: Jar){
	baseName = 'ponysdk-src'
	from sourceSets.main.allJava
	from(srcCore) {
		include '*.xml'
	}
}

task copyAllLibs << {
	println 'Copying all libs'
	copy {
		from configurations.gwt
		into 'libs/gwt'
	}
	copy {
		from configurations.spring
		into 'libs/spring'
	}
	copy {
		from configurations.sl4j
		into 'libs/logging'
	}
	copy {
		from configurations.hibernate
		into 'libs/hibernate'
	}
	copy {
		from configurations.jasper
		into 'libs/jasper'
	}
}

clean.dependsOn(cleanGenerate)
compileJava.dependsOn(generate)
jar.dependsOn(gwtc)
assemble.dependsOn(copyAllLibs)
