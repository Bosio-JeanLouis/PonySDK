apply plugin: 'java'

sourceCompatibility = 1.6

srcSample = 'src/main/java'
srcGenerated = 'src-generated/main/java'

ponysdkPath = project.rootDir.path + '/../' + 'ponysdk'

//warOutputDirName = buildDir.name + '/war';
packageOutputDirName = buildDir.name + '/package';

repositories {
    mavenCentral()
    maven {
    	url "https://github.com/mbarbier/ponysdk-mvn-repo/raw/master/ext"
	}
}

configurations {
	java2html
	highcharts
	compile {
		extendsFrom java2html, highcharts
	}
	runtime {
		extendsFrom java2html, highcharts
	}
}

dependencies {
	java2html 'de.java2html:java2html:1.0'
	compile project(':ponysdk')
	compile fileTree (dir: 'libs', includes: ['*.jar']) 
	runtime project(':ponysdk')
}

sourceSets {
	main {
		java {
			srcDir srcSample
			srcDir srcGenerated
		}
	}
}

task cleanGenerated(type: Delete){
  delete srcGenerated
}

task cleanDebug(type: Delete) {
  delete 'war/ponyterminal', 'war/WEB-INF/deploy'
}

task generate{
}

task generateSkeleton(type: JavaExec) {
	description = 'Generate skeletons'
	main = 'com.ponysdk.generator.Generator'
	outputs.upToDateSpec = new org.gradle.api.specs.AndSpec() // GRADLE-1483
	inputs.dir file('spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j
		]
	}
	args = [
		'spec',
		srcGenerated
		]
}

task generateProxyBuilder(type: JavaExec) {
	description = 'Generate spring proxybuilder'
	main = 'com.ponysdk.spring.ProxyBuilderGenerator'
	outputs.upToDateSpec = new org.gradle.api.specs.AndSpec() // GRADLE-1483
	inputs.dir file('spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j,
			project(':ponysdk').configurations.spring
		]
	}
	args = [
		'spec',
		srcGenerated
		]
}

task copyAllLibs << {
	println 'Copying all libs'
	copy {
		from configurations.java2html
		into 'libs/java2html'
	}
	copy {
		from configurations.highcharts
		into 'libs/highcharts'
	}
}

task createWrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-6'
}

task createPackage << {

	ponysdkWarResourcesPath = ponysdkPath + '/' + project(':ponysdk').warResources

	println 'Building war'
	println 'ponysdk path: ' + ponysdkPath
	println 'ponysdk war path: ' + ponysdkWarResourcesPath
	
	
	
	copy {
		from configurations.java2html
		from configurations.highcharts
		from project(':ponysdk').configurations.sl4j
		from project(':ponysdk').configurations.spring
		from project(':ponysdk').configurations.gwt
		from project(':ponysdk').buildDir.path + '/libs'
		into packageOutputDirName + '/lib'
	}
	copy {
		from sourceSets.main.java
		from sourceSets.main.output
		into packageOutputDirName + '/war/WEB-INF/classes'
	}
	copy {
		from 'etc'
		into packageOutputDirName + '/etc'
	}
	copy {
		from ponysdkWarResourcesPath
		into packageOutputDirName + '/war'
	}

	delete packageOutputDirName + '/start.bat'
	delete packageOutputDirName + '/start.sh'

	f = new File(packageOutputDirName + '/start.bat')
	writer = f.newWriter("UTF-8", true)
	writer.write("java -server -cp .;etc/;lib/* com.ponysdk.core.main.Main port=8081 contextName=sample war=war/\n")
	writer.write("pause\n")
	writer.close()

	f = new File(packageOutputDirName + '/start.sh')
	writer = f.newWriter("UTF-8", true)
	writer.write("java -server -cp .:etc/:lib/* com.ponysdk.core.main.Main port=8081 contextName=sample war=war/\n")
	writer.close()
}

jar {
	doLast {
		tasks.createPackage.execute()
	}
}

assemble.dependsOn(copyAllLibs)
generate.dependsOn(generateSkeleton)
generate.dependsOn(generateProxyBuilder)
compileJava.dependsOn(generate)
generate.dependsOn(cleanGenerated)
