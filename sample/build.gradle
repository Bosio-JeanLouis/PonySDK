apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.6

warPath = buildDir.name + '/war'
runtimeLibPath = buildDir.name + '/runtime-lib'

repositories {
	mavenCentral()
}

dependencies {
	compile project(':ponysdk')
}

build {
	doLast {
		tasks.generateLauncher.execute()
		tasks.copyWar.execute()
	}
}

task printRuntime() << {
	println project(':ponysdk').name
	println '===================================='
	for(file in configurations.runtime) {
		println file
	}
}

task generateLauncher() << {
	f = new File('build/launcher/Sample.launch')
	f.mkdirs()
	f.delete()
	
	writer = f.newWriter("UTF-8", true)
	writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n")
	writer.write("<launchConfiguration type=\"org.eclipse.jdt.launching.localJavaApplication\">\n")
	writer.write("<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n")
	writer.write("<listEntry value=\"/"+project(':ponysdk').name+"/src-core/main/java/com/ponysdk/core/main/Main.java\"/>\n")
	writer.write("</listAttribute>\n")
	writer.write("<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n")
	writer.write("<listEntry value=\"1\"/>\n")
	writer.write("</listAttribute>\n")
	writer.write("<booleanAttribute key=\"org.eclipse.debug.core.appendEnvironmentVariables\" value=\"true\"/>\n")
	writer.write("<stringAttribute key=\"org.eclipse.debug.core.source_locator_id\" value=\"org.eclipse.jdt.launching.sourceLocator.JavaSourceLookupDirector\"/>\n")
	writer.write("<stringAttribute key=\"org.eclipse.debug.core.source_locator_memento\" value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;sourceLookupDirector&gt;&#13;&#10;&lt;sourceContainers duplicates=&quot;false&quot;/&gt;&#13;&#10;&lt;/sourceLookupDirector&gt;&#13;&#10;\"/>\n")
	writer.write("<listAttribute key=\"org.eclipse.jdt.launching.CLASSPATH\">\n")
	writer.write("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER&quot; javaProject=&quot;sample&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#13;&#10;\"/>\n")
	writer.write("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry path=&quot;3&quot; projectName=&quot;ponysdk&quot; type=&quot;1&quot;/&gt;&#13;&#10;\"/>\n")
	writer.write("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/sample/bin&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#13;&#10;\"/>\n")
	for(file in configurations.runtime) {
		writer.write("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#13;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;$file&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#13;&#10;\"/>\n")
	}
	writer.write("</listAttribute>\n")
	writer.write("<booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>\n")
	writer.write("<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"com.ponysdk.core.main.Main\"/>\n")
	writer.write("<stringAttribute key=\"org.eclipse.jdt.launching.PROGRAM_ARGUMENTS\" value=\"port=8081 contextName=sample war="+warPath+"/\"/>\n")
	writer.write("<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"sample\"/>\n")
	writer.write("<stringAttribute key=\"org.eclipse.jdt.launching.VM_ARGUMENTS\" value=\"-XX:+UseConcMarkSweepGC -XX:CompileThreshold=1   -server -Xms1024m -Xmx1024m -Xmn512m\"/>\n")
	writer.write("</launchConfiguration>\n")
	writer.close()
}

task copyWar << {
	copy {
		from project(':ponysdk').projectDir.path + '/' + project(':ponysdk').warResources
    	into warPath
	}
	copy {
		from project(':ponysdk').projectDir.path + '/build/gwt'
		into warPath
	}
	copy {
		from sourceSets.main.resources
		into warPath + '/WEB-INF/classes'
	}
	//copy {
	//	from configurations.runtime
    //	into runtimeLibPath
	//}
}
